# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import file_transfer_pb2 as file__transfer__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in file_transfer_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FileTransferServiceStub(object):
    """Service for file transfer operations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TransferChunk = channel.unary_unary(
                '/file_transfer.FileTransferService/TransferChunk',
                request_serializer=file__transfer__pb2.FileChunk.SerializeToString,
                response_deserializer=file__transfer__pb2.TransferResponse.FromString,
                _registered_method=True)
        self.StartTransfer = channel.unary_unary(
                '/file_transfer.FileTransferService/StartTransfer',
                request_serializer=file__transfer__pb2.TransferRequest.SerializeToString,
                response_deserializer=file__transfer__pb2.TransferResponse.FromString,
                _registered_method=True)
        self.CompleteTransfer = channel.unary_unary(
                '/file_transfer.FileTransferService/CompleteTransfer',
                request_serializer=file__transfer__pb2.CompleteTransferRequest.SerializeToString,
                response_deserializer=file__transfer__pb2.TransferResponse.FromString,
                _registered_method=True)
        self.GetFileInfo = channel.unary_unary(
                '/file_transfer.FileTransferService/GetFileInfo',
                request_serializer=file__transfer__pb2.FileInfoRequest.SerializeToString,
                response_deserializer=file__transfer__pb2.FileInfoResponse.FromString,
                _registered_method=True)
        self.ListFiles = channel.unary_unary(
                '/file_transfer.FileTransferService/ListFiles',
                request_serializer=file__transfer__pb2.ListFilesRequest.SerializeToString,
                response_deserializer=file__transfer__pb2.ListFilesResponse.FromString,
                _registered_method=True)


class FileTransferServiceServicer(object):
    """Service for file transfer operations
    """

    def TransferChunk(self, request, context):
        """Transfer a file chunk
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTransfer(self, request, context):
        """Start a file transfer session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteTransfer(self, request, context):
        """Complete a file transfer session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFileInfo(self, request, context):
        """Get file information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFiles(self, request, context):
        """List files in a directory
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileTransferServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TransferChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferChunk,
                    request_deserializer=file__transfer__pb2.FileChunk.FromString,
                    response_serializer=file__transfer__pb2.TransferResponse.SerializeToString,
            ),
            'StartTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTransfer,
                    request_deserializer=file__transfer__pb2.TransferRequest.FromString,
                    response_serializer=file__transfer__pb2.TransferResponse.SerializeToString,
            ),
            'CompleteTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteTransfer,
                    request_deserializer=file__transfer__pb2.CompleteTransferRequest.FromString,
                    response_serializer=file__transfer__pb2.TransferResponse.SerializeToString,
            ),
            'GetFileInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFileInfo,
                    request_deserializer=file__transfer__pb2.FileInfoRequest.FromString,
                    response_serializer=file__transfer__pb2.FileInfoResponse.SerializeToString,
            ),
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=file__transfer__pb2.ListFilesRequest.FromString,
                    response_serializer=file__transfer__pb2.ListFilesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'file_transfer.FileTransferService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('file_transfer.FileTransferService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FileTransferService(object):
    """Service for file transfer operations
    """

    @staticmethod
    def TransferChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file_transfer.FileTransferService/TransferChunk',
            file__transfer__pb2.FileChunk.SerializeToString,
            file__transfer__pb2.TransferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file_transfer.FileTransferService/StartTransfer',
            file__transfer__pb2.TransferRequest.SerializeToString,
            file__transfer__pb2.TransferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CompleteTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file_transfer.FileTransferService/CompleteTransfer',
            file__transfer__pb2.CompleteTransferRequest.SerializeToString,
            file__transfer__pb2.TransferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFileInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file_transfer.FileTransferService/GetFileInfo',
            file__transfer__pb2.FileInfoRequest.SerializeToString,
            file__transfer__pb2.FileInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file_transfer.FileTransferService/ListFiles',
            file__transfer__pb2.ListFilesRequest.SerializeToString,
            file__transfer__pb2.ListFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NodeManagementServiceStub(object):
    """Service for node management
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterNode = channel.unary_unary(
                '/file_transfer.NodeManagementService/RegisterNode',
                request_serializer=file__transfer__pb2.NodeRegistration.SerializeToString,
                response_deserializer=file__transfer__pb2.NodeResponse.FromString,
                _registered_method=True)
        self.UnregisterNode = channel.unary_unary(
                '/file_transfer.NodeManagementService/UnregisterNode',
                request_serializer=file__transfer__pb2.NodeRegistration.SerializeToString,
                response_deserializer=file__transfer__pb2.NodeResponse.FromString,
                _registered_method=True)
        self.GetActiveNodes = channel.unary_unary(
                '/file_transfer.NodeManagementService/GetActiveNodes',
                request_serializer=file__transfer__pb2.Empty.SerializeToString,
                response_deserializer=file__transfer__pb2.ActiveNodesResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/file_transfer.NodeManagementService/HealthCheck',
                request_serializer=file__transfer__pb2.Empty.SerializeToString,
                response_deserializer=file__transfer__pb2.HealthResponse.FromString,
                _registered_method=True)


class NodeManagementServiceServicer(object):
    """Service for node management
    """

    def RegisterNode(self, request, context):
        """Register a node as active
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterNode(self, request, context):
        """Unregister a node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActiveNodes(self, request, context):
        """Get active nodes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeManagementServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterNode': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterNode,
                    request_deserializer=file__transfer__pb2.NodeRegistration.FromString,
                    response_serializer=file__transfer__pb2.NodeResponse.SerializeToString,
            ),
            'UnregisterNode': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterNode,
                    request_deserializer=file__transfer__pb2.NodeRegistration.FromString,
                    response_serializer=file__transfer__pb2.NodeResponse.SerializeToString,
            ),
            'GetActiveNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActiveNodes,
                    request_deserializer=file__transfer__pb2.Empty.FromString,
                    response_serializer=file__transfer__pb2.ActiveNodesResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=file__transfer__pb2.Empty.FromString,
                    response_serializer=file__transfer__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'file_transfer.NodeManagementService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('file_transfer.NodeManagementService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeManagementService(object):
    """Service for node management
    """

    @staticmethod
    def RegisterNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file_transfer.NodeManagementService/RegisterNode',
            file__transfer__pb2.NodeRegistration.SerializeToString,
            file__transfer__pb2.NodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnregisterNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file_transfer.NodeManagementService/UnregisterNode',
            file__transfer__pb2.NodeRegistration.SerializeToString,
            file__transfer__pb2.NodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetActiveNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file_transfer.NodeManagementService/GetActiveNodes',
            file__transfer__pb2.Empty.SerializeToString,
            file__transfer__pb2.ActiveNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/file_transfer.NodeManagementService/HealthCheck',
            file__transfer__pb2.Empty.SerializeToString,
            file__transfer__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
